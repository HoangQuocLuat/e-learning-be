package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	graph_model "e-learning/src/graph/generated/model"
	service_schedules "e-learning/src/service/schedules"
	"fmt"
)

// SchedulesAdd is the resolver for the schedulesAdd field.
func (r *mutationResolver) SchedulesAdd(ctx context.Context, data *graph_model.SchedulesAdd) (*graph_model.Schedules, error) {
	input := &service_schedules.SchedulesAddCommand{
		ClassID:       data.ClassID,
		Description:   data.Description,
		SchedulesType: data.SchedulesType,
		StartDate:     data.StartDate,
		EndDate:       data.EndDate,
		StartTime:     data.StartTime,
		EndTime:       data.EndTime,
	}

	result, err := service_schedules.SchedulesAdd(ctx, input)
	if err != nil {
		return &graph_model.Schedules{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// SchedulesDelete is the resolver for the schedulesDelete field.
func (r *mutationResolver) SchedulesDelete(ctx context.Context, data *graph_model.SchedulesDelete) (bool, error) {
	panic(fmt.Errorf("not implemented: SchedulesDelete - schedulesDelete"))
}

// Schedules is the resolver for the schedules field.
func (r *queryResolver) Schedules(ctx context.Context, classID string) ([]graph_model.Schedules, error) {
	input := &service_schedules.SchedulesByIDCommand{
		ClassID: classID,
	}

	result, err := service_schedules.SchedulesByClassID(ctx, input)
	if err != nil {
		return nil, err
	}

	var schedulesList []graph_model.Schedules
	for _, d := range result {
		schedulesList = append(schedulesList, graph_model.Schedules{
			ID:            d.ID,
			StartTime:     d.StartTime,
			EndTime:       d.EndTime,
			SchedulesType: d.SchedulesType,
		})
	}

	return schedulesList, nil
}

// SchedulesList is the resolver for the schedulesList field.
func (r *queryResolver) SchedulesList(ctx context.Context) ([]graph_model.Schedules, error) {
	panic(fmt.Errorf("not implemented: SchedulesList - schedulesList"))
}
