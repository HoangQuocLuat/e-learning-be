package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	graph_model "e-learning/src/graph/generated/model"
	service_account "e-learning/src/service/user"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
)

// AccountAdd is the resolver for the accountAdd field.
func (r *mutationResolver) UserAdd(ctx context.Context, data *graph_model.UserAdd) (*graph_model.User, error) {
	input := &service_account.UserAddCommand{
		ClassID:   data.ClassID,
		UserName:  data.UserName,
		Password:  data.Password,
		Role:      data.Role,
		Name:      data.Name,
		DateBirth: data.DateBirth,
		Phone:     data.Phone,
		Email:     data.Email,
		Address:   data.Address,
	}
	if data.UserType != nil {
		input.UserType = *data.UserType
	}

	result, err := service_account.UserAdd(ctx, input)
	if err != nil {
		return &graph_model.User{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// UserUpdate is the resolver for the userUpdate field.
func (r *mutationResolver) UserUpdate(ctx context.Context, data *graph_model.UserUpdateByAdmin) (*graph_model.User, error) {
	panic(fmt.Errorf("not implemented: UserUpdate - userUpdate"))
}

// AccountDelete is the resolver for the AccountDelete field.
func (r *mutationResolver) UserDelete(ctx context.Context, data *graph_model.UserDelete) (bool, error) {
	input := &service_account.UserDeleteCommand{
		ID: data.ID,
	}

	err := service_account.UserDelete(ctx, input)
	if err != nil {
		return false, err
	}

	return true, nil
}

// AccountPagination is the resolver for the accountPagination field.
func (r *queryResolver) UserPagination(ctx context.Context, page int, limit int, orderBy *string, search map[string]interface{}) (*graph_model.UserPagination, error) {
	input := &service_account.UserPaginationCommand{
		Page:  page,
		Limit: limit,
	}

	if orderBy != nil {
		input.OrderBy = *orderBy
	}

	if search != nil {
		input.Search = search
	}

	total, result, err := service_account.UserPagination(ctx, input)
	if err != nil {
		if graphql.GetErrors(ctx) == nil {
			return nil, err
		}
		return nil, nil
	}

	accounts := make([]graph_model.User, 0)
	for i := 0; i < len(result); i++ {
		accounts = append(accounts, *result[i].ConvertToModelGraph())
	}

	return &graph_model.UserPagination{
		Rows: accounts,
		Paging: graph_model.Pagination{
			CurrentPage: page,
			Limit:       limit,
			TotalPages:  CalculateTotalPage(total, limit),
			Total:       total,
		},
	}, nil
}
