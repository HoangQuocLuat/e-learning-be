package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	generated_admin "e-learning/src/graph/generated/admin"
	graph_model "e-learning/src/graph/generated/model"
	service_account "e-learning/src/service/account"

	"github.com/99designs/gqlgen/graphql"
)

// AccountAdd is the resolver for the accountAdd field.
func (r *mutationResolver) AccountAdd(ctx context.Context, data *graph_model.AccountAdd) (*graph_model.Account, error) {
	input := &service_account.AccountAddCommand{
		UserName:  data.Username,
		Password:  data.Password,
		Role:      data.Role,
		Name:      data.Name,
		DateBirth: data.DateBirth,
		Phone:     data.Phone,
		Email:     data.Email,
		Address:   data.Address,
	}

	result, err := service_account.AccountAdd(ctx, input)
	if err != nil {
		return &graph_model.Account{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// AccountDelete is the resolver for the AccountDelete field.
func (r *mutationResolver) AccountDelete(ctx context.Context, data *graph_model.AccountDelete) (*graph_model.Account, error) {
	input := &service_account.AccountDeleteCommand{
		ID: data.ID,
	}

	err := service_account.AccountDelete(ctx, input)
	if err != nil {
		return &graph_model.Account{}, err
	}

	return &graph_model.Account{}, nil
}

// AccountPagination is the resolver for the accountPagination field.
func (r *queryResolver) AccountPagination(ctx context.Context, page int, limit int, orderBy *string, search map[string]interface{}) (*graph_model.AccountPagination, error) {
	input := &service_account.AccountPaginationCommand{
		Page:  page,
		Limit: limit,
	}

	if orderBy != nil {
		input.OrderBy = *orderBy
	}

	if search != nil {
		input.Search = search
	}

	total, result, err := service_account.AccountPagination(ctx, input)
	if err != nil {
		if graphql.GetErrors(ctx) == nil {
			return nil, err
		}
		return nil, nil
	}

	accounts := make([]graph_model.Account, 0)
	for i := 0; i < len(result); i++ {
		accounts = append(accounts, *result[i].ConvertToModelGraph())
	}

	return &graph_model.AccountPagination{
		Rows: accounts,
		Paging: graph_model.Pagination{
			CurrentPage: page,
			Limit:       limit,
			TotalPages:  CalculateTotalPage(total, limit),
			Total:       total,
		},
	}, nil
}

// Mutation returns generated_admin.MutationResolver implementation.
func (r *Resolver) Mutation() generated_admin.MutationResolver { return &mutationResolver{r} }

// Query returns generated_admin.QueryResolver implementation.
func (r *Resolver) Query() generated_admin.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
