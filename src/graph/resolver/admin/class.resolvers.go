package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	generated_admin "e-learning/src/graph/generated/admin"
	graph_model "e-learning/src/graph/generated/model"
	service_class "e-learning/src/service/class"
	"fmt"
)

// ClassUpdate is the resolver for the classUpdate field.
func (r *mutationResolver) ClassUpdate(ctx context.Context, data *graph_model.ClassUpdate) (*graph_model.Class, error) {
	panic(fmt.Errorf("not implemented: ClassUpdate - classUpdate"))
}

// ClassAdd is the resolver for the classAdd field.
func (r *mutationResolver) ClassAdd(ctx context.Context, data *graph_model.ClassAdd) (*graph_model.Class, error) {
	input := &service_class.ClassAddCommand{
		ClassName: data.ClassName,
	}

	result, err := service_class.ClassAdd(ctx, input)
	if err != nil {
		return &graph_model.Class{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// ClassDelete is the resolver for the classDelete field.
func (r *mutationResolver) ClassDelete(ctx context.Context, data *graph_model.ClassDelete) (bool, error) {
	input := &service_class.ClassDeleteCommand{
		ID: data.ID,
	}

	err := service_class.ClassDelete(ctx, input)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ClassList is the resolver for the classList field.
func (r *queryResolver) ClassList(ctx context.Context) ([]graph_model.Class, error) {
	result, err := service_class.ClassGetList(ctx, nil)
	if err != nil {
		return nil, err
	}
	var classList []graph_model.Class
	for _, s := range result {
		classList = append(classList, graph_model.Class{
			ID:        s.ID,
			ClassName: s.ClassName,
		})
	}

	return classList, nil
}

// Mutation returns generated_admin.MutationResolver implementation.
func (r *Resolver) Mutation() generated_admin.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
