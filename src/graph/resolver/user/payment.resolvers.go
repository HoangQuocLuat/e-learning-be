package resolver_user

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	graph_model "e-learning/src/graph/generated/model"
	service_payment "e-learning/src/service/payment"

	"github.com/99designs/gqlgen/graphql"
)

// PaymentPaginationByID is the resolver for the paymentPaginationByID field.
func (r *queryResolver) PaymentPaginationByID(ctx context.Context, page int, limit int, id string, orderBy *string, search map[string]interface{}) (*graph_model.PaymentPagination, error) {
	input := &service_payment.PaymentPaginationByIDCommand{
		UserID: id,
		Page:   page,
		Limit:  limit,
	}

	if orderBy != nil {
		input.OrderBy = *orderBy
	}

	if search != nil {
		input.Search = search
	}

	total, result, err := service_payment.PaymentPaginationByID(ctx, input)
	if err != nil {
		if graphql.GetErrors(ctx) == nil {
			return nil, err
		}
		return nil, nil
	}

	payments := make([]graph_model.Payment, 0)
	for i := 0; i < len(result); i++ {
		payments = append(payments, *result[i].ConvertToModelGraph())
	}

	return &graph_model.PaymentPagination{
		Rows: payments,
		Paging: graph_model.Pagination{
			CurrentPage: page,
			Limit:       limit,
			TotalPages:  CalculateTotalPage(total, limit),
			Total:       total,
		},
	}, nil
}
